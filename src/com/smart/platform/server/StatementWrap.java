package com.smart.platform.server;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

import org.apache.log4j.Category;

public class StatementWrap implements Statement {

	ServerContext context = null;
	Statement stat = null;
	HashMap<Integer, String> parammap = new HashMap<Integer, String>();

	long starttime = 0;
	long endtime = 0;
	String logsql = "";

	public StatementWrap(ServerContext context, Statement stat) {
		this.context = context;
		this.stat = stat;
		context.incStatementcount();
	}

	public void addBatch(String sql) throws SQLException {
		logsql = sql;
		stat.addBatch(sql);
	}

	public void cancel() throws SQLException {
		stat.cancel();
	}

	public void clearBatch() throws SQLException {
		stat.clearBatch();
	}

	public void clearWarnings() throws SQLException {
		stat.clearWarnings();
	}

	public void close() throws SQLException {
		stat.close();
		endtime = System.currentTimeMillis();
		context.logtime(logsql, JdbcMonitorInfo.TYPE_STATEMENT, endtime
				- starttime);
		context.decStatementcount();
		usersqlMonitor();
	}

	public boolean execute(String sql) throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			boolean ret = stat.execute(sql);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public boolean execute(String sql, int autoGeneratedKeys)
			throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			boolean ret = stat.execute(sql, autoGeneratedKeys);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			boolean ret = stat.execute(sql, columnIndexes);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public boolean execute(String sql, String[] columnNames)
			throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			boolean ret = stat.execute(sql, columnNames);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public int[] executeBatch() throws SQLException {
		try {
			logsql = "";
			starttime = System.currentTimeMillis();
			int[] rets = stat.executeBatch();
			return rets;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public ResultSet executeQuery(String sql) throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			ResultSet rs = stat.executeQuery(sql);
			return rs;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public int executeUpdate(String sql) throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			int ret = stat.executeUpdate(sql);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public int executeUpdate(String sql, int autoGeneratedKeys)
			throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			int ret = stat.executeUpdate(sql, autoGeneratedKeys);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public int executeUpdate(String sql, int[] columnIndexes)
			throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			int ret = stat.executeUpdate(sql, columnIndexes);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public int executeUpdate(String sql, String[] columnNames)
			throws SQLException {
		try {
			logsql = sql;
			starttime = System.currentTimeMillis();
			int ret = stat.executeUpdate(sql, columnNames);
			return ret;
		} catch (SQLException sqle) {
			logErrorsql(sqle.getMessage());
			throw sqle;
		}

	}

	public Connection getConnection() throws SQLException {
		return stat.getConnection();
	}

	public int getFetchDirection() throws SQLException {
		return stat.getFetchDirection();
	}

	public int getFetchSize() throws SQLException {
		return stat.getFetchSize();
	}

	public ResultSet getGeneratedKeys() throws SQLException {
		return stat.getGeneratedKeys();
	}

	public int getMaxFieldSize() throws SQLException {
		return stat.getMaxFieldSize();
	}

	public int getMaxRows() throws SQLException {
		return stat.getMaxRows();
	}

	public boolean getMoreResults() throws SQLException {
		return stat.getMoreResults();
	}

	public boolean getMoreResults(int current) throws SQLException {
		return stat.getMoreResults(current);
	}

	public int getQueryTimeout() throws SQLException {
		return stat.getQueryTimeout();
	}

	public ResultSet getResultSet() throws SQLException {
		return stat.getResultSet();
	}

	public int getResultSetConcurrency() throws SQLException {
		return stat.getResultSetConcurrency();
	}

	public int getResultSetHoldability() throws SQLException {
		return stat.getResultSetHoldability();
	}

	public int getResultSetType() throws SQLException {
		return stat.getResultSetType();
	}

	public int getUpdateCount() throws SQLException {
		return stat.getUpdateCount();
	}

	public SQLWarning getWarnings() throws SQLException {
		return stat.getWarnings();
	}

	public void setCursorName(String name) throws SQLException {
		stat.setCursorName(name);
	}

	public void setEscapeProcessing(boolean enable) throws SQLException {
		stat.setEscapeProcessing(enable);
	}

	public void setFetchDirection(int direction) throws SQLException {
		stat.setFetchDirection(direction);
	}

	public void setFetchSize(int rows) throws SQLException {
		stat.setFetchSize(rows);

	}

	public void setMaxFieldSize(int max) throws SQLException {
		stat.setMaxFieldSize(max);
	}

	public void setMaxRows(int max) throws SQLException {
		stat.setMaxRows(max);

	}

	public void setQueryTimeout(int seconds) throws SQLException {
		stat.setQueryTimeout(seconds);
	}

	protected void usersqlMonitor() {
		if (context == null || context.getUserinfo() == null)
			return;
		String userid = context.getUserinfo().getUserid();
		String paramstring = buildSqlparamstring();
		UsersqlMonitor usersqlm = UsersqlMonitor.getInstance();
		long usetime = System.currentTimeMillis() - starttime;
		usersqlm.addlog(userid, logsql, paramstring, usetime);
	}

	protected void logErrorsql(String errmsg) {
		String paramstring = buildSqlparamstring();
		StringBuffer sb = new StringBuffer();
		sb.append("!!!!!!!!!!!!!!ERROR SQL!!!!!!!!!!!!!!\n");
		sb.append(errmsg+"\n");
		sb.append("sql:\n" + logsql + "\n");
		sb.append("param:\n" + paramstring);
		Category.getInstance(PreparedstatementWrap.class).error(sb.toString());
	}

	protected String buildSqlparamstring() {
		LinkedList<Integer> sortkey = new LinkedList(parammap.keySet());
		Collections.sort(sortkey);
		Iterator<Integer> it = sortkey.iterator();
		StringBuffer sb = new StringBuffer();
		while (it.hasNext()) {
			Integer keyindex = (Integer) it.next();
			String paramvalue = parammap.get(keyindex);
			sb.append(paramvalue + ",");
		}
		return sb.toString();
	}

	public boolean isClosed() throws SQLException {
		return stat.isClosed();
	}

	public boolean isPoolable() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setPoolable(boolean poolable) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

}
