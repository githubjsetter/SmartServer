package com.inca.np.server;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import org.apache.log4j.Category;

/**
 * JDBC的连接器包装,用于检查没有关闭的连接
 * 
 * @author Administrator
 * 
 */
public class JdbcConnectWraper implements Connection {
	Connection con = null;

	ServerContext context = null;

	public JdbcConnectWraper(ServerContext context,Connection con) {
		this.con = con;
		this.context = context;
		context.incConnect();
	}

	public void clearWarnings() throws SQLException {
		con.clearWarnings();
	}

	public void close() throws SQLException {
		con.close();
		context.decConnect();
	}

	public void commit() throws SQLException {
		con.commit();
	}

	public Statement createStatement() throws SQLException {
		Statement stat=con.createStatement();
		StatementWrap statwrap=new StatementWrap(context,stat);
		return statwrap;
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {
		Statement stat=con.createStatement(resultSetType, resultSetConcurrency);
		StatementWrap statwrap=new StatementWrap(context,stat);
		return statwrap;
	}

	public Statement createStatement(int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		Statement stat=con.createStatement(resultSetType, resultSetConcurrency,
				resultSetHoldability);
		StatementWrap statwrap=new StatementWrap(context,stat);
		return statwrap;
	}

	public boolean getAutoCommit() throws SQLException {
		return con.getAutoCommit();
	}

	public String getCatalog() throws SQLException {
		return con.getCatalog();
	}

	public int getHoldability() throws SQLException {
		return con.getHoldability();
	}

	public DatabaseMetaData getMetaData() throws SQLException {
		// TODO Auto-generated method stub
		return con.getMetaData();
	}

	public int getTransactionIsolation() throws SQLException {
		return con.getTransactionIsolation();
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return con.getTypeMap();
	}

	public SQLWarning getWarnings() throws SQLException {
		return con.getWarnings();
	}

	public boolean isClosed() throws SQLException {
		return con.isClosed();
	}

	public boolean isReadOnly() throws SQLException {
		return con.isReadOnly();
	}

	public String nativeSQL(String sql) throws SQLException {
		return con.nativeSQL(sql);
	}

	public CallableStatement prepareCall(String sql) throws SQLException {
		CallableStatement stat=con.prepareCall(sql);
		CallableStatementWrap callwrap=new CallableStatementWrap(context,stat,sql);
		return callwrap;
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		CallableStatement stat=prepareCall(sql, resultSetType, resultSetConcurrency);
		CallableStatementWrap callwrap=new CallableStatementWrap(context,stat,sql);
		return callwrap;
	}

	public CallableStatement prepareCall(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		CallableStatement stat=prepareCall(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
		CallableStatementWrap callwrap=new CallableStatementWrap(context,stat,sql);
		return callwrap;
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql, autoGeneratedKeys);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql, columnIndexes);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql, columnNames);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency) throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql, resultSetType, resultSetConcurrency);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType,
			int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {
		PreparedStatement stat=con.prepareStatement(sql, resultSetType, resultSetConcurrency,
				resultSetHoldability);
		PreparedstatementWrap wrap=new PreparedstatementWrap(context,stat,sql);
		return wrap;
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		con.releaseSavepoint(savepoint);

	}

	public void rollback() throws SQLException {
		con.rollback();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		con.rollback(savepoint);

	}

	public void setAutoCommit(boolean autoCommit) throws SQLException {
		con.setAutoCommit(autoCommit);

	}

	public void setCatalog(String catalog) throws SQLException {
		con.setCatalog(catalog);

	}

	public void setHoldability(int holdability) throws SQLException {
		con.setHoldability(holdability);

	}

	public void setReadOnly(boolean readOnly) throws SQLException {
		con.setReadOnly(readOnly);

	}

	public Savepoint setSavepoint() throws SQLException {
		return con.setSavepoint();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		return con.setSavepoint(name);
	}

	public void setTransactionIsolation(int level) throws SQLException {
		con.setTransactionIsolation(level);

	}

	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		con.setTypeMap(map);
	}

	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setSchema(String schema) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public String getSchema() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void abort(Executor executor) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int getNetworkTimeout() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

}
